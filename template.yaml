AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  EnvParameter:
    Type: String
    AllowedValues: 
      - dev
      - prod
  BucketNameParameter:
    Type: String
    Default: scarcity-artifacts
  GitShaParameter:
    Type: String  
  LayerVersionParameter:
    Type: String
  TldParameter:
    Type: String
    Default: pessimistic-it.com

Mappings:
  EnvMap:
    dev:
      CertificateArn: arn:aws:acm:us-west-2:470576235824:certificate/db051ea9-3d67-4af8-9cd7-d415e075a100

Transform: 'AWS::Serverless-2016-10-31'

Resources:
  ScarcityApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub "scarcity-${EnvParameter}"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
    DependsOn: ApiGatewayAccount
  EchoRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ScarcityApi
      RouteKey: echo
      AuthorizationType: NONE
      Target: !Join ['/', ['integrations', !Ref EchoIntegration]]
  EchoIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ScarcityApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EchoFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - EchoRoute
    Properties:
      ApiId: !Ref ScarcityApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      DefaultRouteSettings:
        LoggingLevel: ERROR
        DataTraceEnabled: true
      StageName: !Ref EnvParameter
      DeploymentId: !Ref Deployment
      ApiId: !Ref ScarcityApi
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: "Allow"
          Principal:
            Service:
              - "apigateway.amazonaws.com"
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccount: 
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn
  # DomainName:
  #   Type: 'AWS::ApiGateway::DomainName'
  #   Properties:
  #     RegionalCertificateArn: !FindInMap
  #       - EnvMap
  #       - !Ref EnvParameter
  #       - CertificateArn
  #     EndpointConfiguration:
  #       Types:
  #       - REGIONAL
  #     DomainName: !Sub "${EnvParameter}.scarcity.${TldParameter}"
  DomainMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      Stage: !Ref EnvParameter
      BasePath: "api"
      DomainName: !Sub "${EnvParameter}.scarcity.${TldParameter}"
      RestApiId: !Ref ScarcityApi
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget: 
        DNSName: !Join [ '', [ !Ref ScarcityApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com'] ]
        HostedZoneId: Z2OJLYMUO9EFXC
      HostedZoneName: !Sub "${TldParameter}."
      Name: !Sub "${EnvParameter}.scarcity.${TldParameter}."
      Type: A

# Functions
  SharedLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      Content: 
        S3Bucket: !Ref BucketNameParameter
        S3Key: !Sub 'layer/${LayerVersionParameter}.zip'
  EchoFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri:
        Bucket: !Ref BucketNameParameter
        Key: !Sub 'functions/echo/${GitShaParameter}.zip'
      Layers:
        - !Ref SharedLayer
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScarcityApi}/*'
  EchoPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ScarcityApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EchoFunction
      Principal: apigateway.amazonaws.com
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref EchoFunction]]
      RetentionInDays: 7

Outputs:
  EchoFunctionArn:
    Description: "Echo function ARN"
    Value: !GetAtt EchoFunction.Arn
  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref ScarcityApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'Stage'] ]