AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  EnvParameter:
    Type: String
    AllowedValues: 
      - dev
      - prod
  BucketNameParameter:
    Type: String
    Default: scarcity-artifacts
  GitShaParameter:
    Type: String  
  LayerVersionParameter:
    Type: String
  TldParameter:
    Type: String
    Default: pessimistic-it.com

Mappings:
  EnvMap:
    dev:
      TargetWssDomain: d-vcreg6l6fe.execute-api.us-west-2.amazonaws.com
  CertMap:
    us-east-1:
      arn: arn:aws:acm:us-east-1:470576235824:certificate/dd347eb4-7688-45a2-8dbf-f09226e2f57a
    us-west-2:
      arn: arn:aws:acm:us-west-2:470576235824:certificate/cfe2707c-1378-4f1b-9c2c-90faceff2141

Transform: 'AWS::Serverless-2016-10-31'

Resources:
# Wss Api
  ScarcityWss:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub "scarcity-${EnvParameter}"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
    DependsOn: ApiGatewayAccount
  EchoRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ScarcityWss
      RouteKey: echo
      AuthorizationType: NONE
      Target: !Join ['/', ['integrations', !Ref EchoIntegration]]
  EchoIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ScarcityWss
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EchoFunction.Arn}/invocations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ScarcityWss
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join ['/', ['integrations', !Ref ConnectIntegration]]
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ScarcityWss
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - EchoRoute
    Properties:
      ApiId: !Ref ScarcityWss
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref GitShaParameter
      DeploymentId: !Ref Deployment
      ApiId: !Ref ScarcityWss
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: "Allow"
          Principal:
            Service:
              - "apigateway.amazonaws.com"
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccount: 
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn
  # DomainMapping:
  #   Type: 'AWS::ApiGateway::BasePathMapping'
  #   Properties:
  #     Stage: !Ref Stage
  #     DomainName: !Sub "wss.${EnvParameter}.scarcity.${TldParameter}"
  #     RestApiId: !Ref ScarcityWss
  # DnsRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     AliasTarget: 
  #       DNSName: !FindInMap
  #         - EnvMap
  #         - !Ref EnvParameter
  #         - TargetWssDomain
  #       HostedZoneId: Z2OJLYMUO9EFXC
  #     HostedZoneName: !Sub "${TldParameter}."
  #     Name: !Sub "wss.${EnvParameter}.scarcity.${TldParameter}."
  #     Type: A

# Site
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: scarcity-site
      WebsiteConfiguration:
        IndexDocument: index.html
  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      PolicyDocument:
        # Id: MyPolicy
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${SiteBucket}/*
      Bucket: !Ref SiteBucket
  SiteCloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Select [2, !Split ["/", !GetAtt SiteBucket.WebsiteURL]]
          Id: SiteOriginId
          OriginPath: !Sub /${GitShaParameter}
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        Aliases:
        - !Sub "www.${EnvParameter}.scarcity.${TldParameter}"
        - !Sub "${EnvParameter}.scarcity.${TldParameter}"
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: SiteOriginId
          Compress: True
          MinTTL: 300
          DefaultTTL: 300
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !FindInMap
            - CertMap
            - us-east-1
            - arn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
        HttpVersion: http2
  SiteDns:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget: 
        DNSName: !GetAtt [SiteCloudfront, DomainName]
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneName: !Sub "${TldParameter}."
      Name: !Sub "${EnvParameter}.scarcity.${TldParameter}."
      Type: A
  WwwSiteDns:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget: 
        DNSName: !GetAtt [SiteCloudfront, DomainName]
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneName: !Sub "${TldParameter}."
      Name: !Sub "www.${EnvParameter}.scarcity.${TldParameter}."
      Type: A
# tables
  ConnectionsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - 
          AttributeName: "connectionId"
          AttributeType: "S"
        - 
          AttributeName: "accountId"
          AttributeType: "S"
        - 
          AttributeName: "floor"
          AttributeType: "S"     
      KeySchema: 
        - 
          AttributeName: "connectionId"
          KeyType: "HASH"
      StreamSpecification:
        StreamViewType: KEYS_ONLY
      GlobalSecondaryIndexes:
        - 
          IndexName: "accountIndex"
          KeySchema: 
            - 
              AttributeName: "accountId"
              KeyType: "HASH"
          Projection: 
            ProjectionType: "KEYS_ONLY"
        - 
          IndexName: "floorIndex"
          KeySchema: 
            - 
              AttributeName: floor
              KeyType: HASH
          Projection: 
            NonKeyAttributes:
              - position
            ProjectionType: INCLUDE
# Wss Functions
  SharedLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      Content: 
        S3Bucket: !Ref BucketNameParameter
        S3Key: !Sub 'layer/${LayerVersionParameter}.zip'
  EchoFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      AutoPublishAlias: !Ref GitShaParameter
      CodeUri:
        Bucket: !Ref BucketNameParameter
        Key: !Sub '${GitShaParameter}/wss/echo/app.zip'
      Layers:
        - !Ref SharedLayer
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScarcityWss}/*'
  EchoPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ScarcityWss
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EchoFunction
      Principal: apigateway.amazonaws.com
  ConnectFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      AutoPublishAlias: !Ref GitShaParameter
      CodeUri:
        Bucket: !Ref BucketNameParameter
        Key: !Sub '${GitShaParameter}/wss/connect/app.zip'
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionsTable
  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ScarcityWss
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com

Outputs:
  WebSocketURI:
    Value: !Join [ '', [ 'wss://', !Ref ScarcityWss, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'Stage'] ]
  # WebSocketDomain:
  #   Value: !Sub "wss://wss.${EnvParameter}.scarcity.${TldParameter}"
  StaticSite:
    Value: !Sub "${EnvParameter}.scarcity.${TldParameter}."
