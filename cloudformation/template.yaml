AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  EnvParameter:
    Type: String
    AllowedValues: 
      - dev
      - int
      - prod
  BucketNameParameter:
    Type: String
    Default: scarcity-artifacts
  GitShaParameter:
    Type: String

Transform: 'AWS::Serverless-2016-10-31'

Resources:
  ScarcityApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub "scarcity-objects-${EnvParameter}"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
    DependsOn: ApiGatewayAccount
  EchoRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ScarcityApi
      RouteKey: echo
      AuthorizationType: NONE
      Target: !Join ['/', ['integrations', !Ref EchoIntegration]]
  EchoIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ScarcityApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EchoFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - EchoRoute
    Properties:
      ApiId: !Ref ScarcityApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      DefaultRouteSettings:
        LoggingLevel: ERROR
        DataTraceEnabled: true
      AccessLogSettings:
        DestinationArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:scarcity-objects-${EnvParameter}
        Format: >-
          {"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user","requestTime":"$context.requestTime",
          "eventType":"$context.eventType","routeKey":"$context.routeKey",
          "status":"$context.status","connectionId":"$context.connectionId"
          "error":"$context.error.message"}
      StageName: !Ref EnvParameter
      DeploymentId: !Ref Deployment
      ApiId: !Ref ScarcityApi
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: "Allow"
          Principal:
            Service:
              - "apigateway.amazonaws.com"
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccount: 
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

# Functions
  EchoFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri:
        Bucket: !Ref BucketNameParameter
        Key: !Sub 'echo-${GitShaParameter}.zip'
  # EchoPermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - ScarcityApi
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref EchoFunction
  #     Principal: apigateway.amazonaws.com
  # LambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "scarcity-objects-${EnvParameter}"
      RetentionInDays: 7

Outputs:
  EchoFunctionArn:
    Description: "Echo function ARN"
    Value: !GetAtt EchoFunction.Arn
  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref ScarcityApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]